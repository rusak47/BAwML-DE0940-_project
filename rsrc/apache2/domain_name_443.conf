#Listen 443
<VirtualHost *:443>
	ServerAdmin webmaster@email
	ServerName <domain_name>
	DocumentRoot /etc/ssl/www/<domain_name>/html
	ServerAlias ip1,ip2

	# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
	# error, crit, alert, emerg.
	# It is also possible to configure the loglevel for particular
	# modules, e.g.
	#LogLevel info ssl:warn

	ErrorLog /etc/ssl/www/<domain_name>/log/error_ssl.log
    CustomLog /etc/ssl/www/<domain_name>/log/access_ssl.log combined

	#   SSL Engine Switch:
	#   Enable/Disable SSL for this virtual host.
	SSLEngine on
	
	SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1
	SSLHonorCipherOrder     on
	SSLCompression          off
	SSLSessionTickets       off

	# keeps the strongest ciphers (GCM, CCM, and ChaCha20-based) and eliminates all weak CBC-based ciphers
	SSLCipherSuite          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-CCM:ECDHE-ECDSA-AES256-CCM

	# Enable OCSP Stapling
	SSLUseStapling on
	SSLStaplingResponseMaxAge 43200
	
	SSLOpenSSLConfCmd DHParameters "/etc/ssl/certs/dhparam.pem"
	
	#   A self-signed (snakeoil) certificate can be created by installing
	#   the ssl-cert package. See
	#   /usr/share/doc/apache2/README.Debian.gz for more info.
	#   If both key and certificate are stored in the same file, only the
	#   SSLCertificateFile directive is needed.
	SSLCertificateFile      /etc/ssl/certs/letsencrypt/<domain_name>/cert.pem
	SSLCertificateKeyFile  /etc/ssl/certs/letsencrypt/<domain_name>/privkey.pem

	#   Server Certificate Chain

	#   concatenation of PEM encoded CA certificates which form the
	#   certificate chain for the server certificate. Alternatively
	#   the referenced file can be the same as SSLCertificateFile
	#   when the CA certificates are directly appended to the server
	#   certificate for convinience.
	SSLCertificateChainFile /etc/ssl/certs/letsencrypt/<domain_name>/chain.pem

	#   Certificate Authority (CA):
	#   Set the CA certificate verification path where to find CA
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be PEM encoded)
	#   Note: Inside SSLCACertificatePath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCACertificatePath /etc/ssl/certs/
	#SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt

	#   Certificate Revocation Lists (CRL):
	#   Set the CA revocation path where to find CA CRLs for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be PEM encoded)
	#   Note: Inside SSLCARevocationPath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCARevocationPath /etc/apache2/ssl.crl/
	#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

	#   Client Authentication (Type):
	#   Client certificate verification type and depth.  Types are
	#   none, optional, require and optional_no_ca.  Depth is a
	#   number which specifies how deeply to verify the certificate
	#   issuer chain before deciding the certificate is not valid.
	#SSLVerifyClient require
	#SSLVerifyDepth  10

	# Enable HSTS with a 1 year duration (31536000 seconds)
	Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

	<FilesMatch "\.(?:cgi|shtml|phtml|php)$">
		SSLOptions +StdEnvVars
	</FilesMatch>
	<Directory /usr/lib/cgi-bin>
		SSLOptions +StdEnvVars
	</Directory>

    RewriteEngine On

	RewriteCond %{HTTP_HOST} !^your\.domain\.name$ [NC]
    RewriteCond %{HTTP_HOST} ^(\d{1,3}\.){3}\d{1,3}$  [OR]
    RewriteCond %{HTTP_HOST} ^(1\.1\.1\.1|2\.2\.2\.2)$
    RewriteRule ^ https://<domain_name>%{REQUEST_URI} [R=301,L]

	ProxyPreserveHost On
   	ProxyPass /search http://<streamlit_ip>:8501/search
   	ProxyPassReverse /search http://<streamlit_ip>:8501/search

   	RewriteCond %{HTTP:Upgrade} =websocket
   	RewriteRule /search/(.*) ws://<streamlit_ip>:8501/search/$1 [P]
   	RewriteCond %{HTTP:Upgrade} !=websocket
   	RewriteRule ^/search/(.*) http://<streamlit_ip>:8501/search/$1 [P]
</VirtualHost>
